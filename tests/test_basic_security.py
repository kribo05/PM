import unittest
import tempfile
import json
import time
from pathlib import Path
from cryptography.fernet import Fernet, InvalidToken

class TestBasicSecurity(unittest.TestCase):
    def setUp(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        self.test_dir = Path(tempfile.mkdtemp(prefix="pm_test_basic_security_"))
        self.key = Fernet.generate_key()
        self.fernet = Fernet(self.key)

    def tearDown(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤"""
        try:
            if self.test_dir.exists():
                import shutil
                shutil.rmtree(self.test_dir)
        except Exception as e:
            print(f"Warning: Failed to cleanup test directory: {e}")

    def test_data_tampering(self):
        """
        –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–æ–¥–º–µ–Ω—ã –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        """
        # –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        original_data = {
            "service": "TestService",
            "username": "test@example.com",
            "password": "SecretPassword123!"
        }
        # –®–∏—Ñ—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        encrypted = self.fernet.encrypt(json.dumps(original_data).encode())
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–º–µ–Ω–∏—Ç—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        tampered = bytearray(encrypted)
        # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–∞–π—Ç–æ–≤ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ
        midpoint = len(tampered) // 2
        tampered[midpoint:midpoint+5] = b'XXXXX' # –ó–∞–º–µ–Ω–∞ 5 –±–∞–π—Ç –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –∑–∞—à. —Å–æ–æ–±—â–µ–Ω–∏—è
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–¥–º–µ–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã
        with self.assertRaises(InvalidToken):
            self.fernet.decrypt(bytes(tampered))
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Å–µ –µ—â–µ –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å
        decrypted = json.loads(self.fernet.decrypt(encrypted).decode())
        self.assertEqual(original_data, decrypted)

    def test_data_integrity(self):
        """
        –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏
        """
        test_cases = [
            "Simple password",
            "Password with —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã",
            "Password with üîë emoji",
            "A" * 1000,  # –î–ª–∏–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
            "!@#$%^&*()_+-=[]{}|;:,.<>?",  # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            "",  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
            " " * 100,  # –ú–Ω–æ–≥–æ –ø—Ä–æ–±–µ–ª–æ–≤
            "1234567890" * 10,  # –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Ü–∏—Ñ—Ä—ã
        ]
        
        for test_data in test_cases:
            # –®–∏—Ñ—Ä—É–µ–º
            encrypted = self.fernet.encrypt(test_data.encode())
            # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º
            decrypted = self.fernet.decrypt(encrypted).decode()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç
            self.assertEqual(
                test_data, 
                decrypted,
                f"–û—à–∏–±–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è: {test_data[:50]}..."
            )

    def test_key_separation(self):
        """
        –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –¥–∞–Ω–Ω—ã–µ, –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–¥–Ω–∏–º –∫–ª—é—á–æ–º,
        –Ω–µ–ª—å–∑—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–º –∫–ª—é—á–æ–º
        """
        # –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä–æ–π –∫–ª—é—á
        another_key = Fernet.generate_key()
        another_fernet = Fernet(another_key)
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∞
        test_data = "Secret message"
        
        # –®–∏—Ñ—Ä—É–µ–º –ø–µ—Ä–≤—ã–º –∫–ª—é—á–æ–º
        encrypted = self.fernet.encrypt(test_data.encode())
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –≤—Ç–æ—Ä—ã–º –∫–ª—é—á–æ–º
        with self.assertRaises(InvalidToken):
            another_fernet.decrypt(encrypted)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –∫–ª—é—á–æ–º –≤—Å–µ –µ—â–µ –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å
        decrypted = self.fernet.decrypt(encrypted).decode()
        self.assertEqual(test_data, decrypted)

    def test_timestamp_validation(self):
        """
        –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —Ç–æ–∫–µ–Ω—ã –∏–º–µ—é—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        """
        # –°–æ–∑–¥–∞–µ–º Fernet —Å –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–º TTL
        short_ttl_fernet = Fernet(Fernet.generate_key())
        
        # –®–∏—Ñ—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        test_data = "Time sensitive data"
        encrypted = short_ttl_fernet.encrypt(test_data.encode())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ä–∞–∑—É –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å
        decrypted = short_ttl_fernet.decrypt(encrypted, ttl=100).decode()
        self.assertEqual(test_data, decrypted)
        
        # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã
        time.sleep(2)
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å TTL –≤ 1 —Å–µ–∫—É–Ω–¥—É (–¥–æ–ª–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É)
        with self.assertRaises(InvalidToken):
            short_ttl_fernet.decrypt(encrypted, ttl=1)

if __name__ == '__main__':
    unittest.main(verbosity=2) 